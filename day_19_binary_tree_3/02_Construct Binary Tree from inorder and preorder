/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> inMap = new HashMap<>();
        for(int i = 0; i< inorder.length;i++){
            inMap.put(inorder[i],i);
        }
        
        TreeNode root  = buildTree(preorder,0,preorder.length-1, inorder,0,inorder.length-1,inMap);
        return root;
    }
    static TreeNode buildTree(int[] preorder,int preStart, int preEnd,  int[] inorder,int inStart,int inEnd,Map<Integer,Integer> inMap){
        
        if(preStart > preEnd || inStart > inEnd){return null;}
        
        TreeNode root  = new TreeNode(preorder[preStart]);
        int inIndex = inMap.get(root.val);
        System.out.println(inIndex);
        
        //number of elements left that will go in left of the tree is == inIndex - inStart
        // and now we have to consider number of element for preorder of the left tree accordingly  say numsLeft + start (start we need to let's say only one element is left and start was at 4 so 4+1 = 5)
        int numsLeft  = inIndex-inStart;
        
        root.left  = buildTree(preorder,preStart+1,numsLeft + preStart, inorder,inStart,inIndex-1,inMap);
        
        root.right  = buildTree(preorder,preStart+numsLeft+1,preEnd, inorder,inIndex+1,inEnd,inMap);
        
        return root;
    }
}
