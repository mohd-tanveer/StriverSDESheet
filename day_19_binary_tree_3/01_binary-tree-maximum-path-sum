/binary-tree-maximum-path-sum


https://leetcode.com/problems/binary-tree-maximum-path-sum/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        
        //we can use the concept of diameter  543. Diameter of Binary Tree
        if(root == null) return 0;
        int[] optimal  = new int[1];
        optimal[0] = root.val;
        subtreeLenAtNode(root,optimal);
        return optimal[0];
    }
    static int subtreeLenAtNode(TreeNode root, int[] o){
        if(root==null) return 0;
        
        int lsb = subtreeLenAtNode(root.left,o);
        int rsb = subtreeLenAtNode(root.right,o) ;
        //here last node can return negative as well that we don't want to include in our path becasue that will minimize our  solution
        lsb = Math.max(0,lsb);
        rsb = Math.max(0,rsb);
        
        o[0] = Math.max(o[0],lsb+rsb+root.val);

        return root.val + Math.max(lsb,rsb);
        
    }
}
