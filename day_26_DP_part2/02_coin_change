class Solution {
    public int coinChange(int[] coins, int amount) {
        
        int dp[][] = new int[coins.length][amount+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        int ans = solve(coins,amount,coins.length-1,dp);
        
        
        return ans >=(int)Math.pow(10,9)?-1:ans;
    }
    static int solve(int[] coins, int amount,int i,int[][] dp){
        
        if(i == 0){
           
            //if index == 0 either we can form the target with given denomination or can't
            if(amount%coins[0] == 0) return amount/coins[0];
            else
                return (int)Math.pow(10,9);
        }
       //take it 
        if(dp[i][amount] != -1) return dp[i][amount];
        
        int take=Integer.MAX_VALUE;
        if(amount-coins[i] >= 0){
            take = Math.min(take,1+solve(coins,amount-coins[i],i,dp));
                    //stying at same index will be considerd in not take scenario of next step
        }
        //not take it 
       
        int notTake = 0+solve(coins,amount,i-1,dp);
        
        return dp[i][amount] = Math.min(take,notTake);
                       
    }
}


//tabulation

class Solution {
    public int coinChange(int[] coins, int amount) {
        
        int dp[][] = new int[coins.length][amount+1];
      
        //base condition 
        for(int target = 0 ; target<=amount;target++){
            
            if(target%coins[0]==0)
                dp[0][target]  = target/coins[0];
            else
                dp[0][target]=(int)Math.pow(10,9);
        }
        
        for(int i =1;i < coins.length;i++){
            
            for(int j=0;j <= amount;j++){
                
                int take = Integer.MAX_VALUE;
                
                if(j-coins[i] >= 0){
                    take = Math.min(take,1+dp[i][j-coins[i]]);
                }
                                                 

                int notTake = 0+dp[i-1][j];

                dp[i][j] = Math.min(take,notTake);

            }
        }
        int ans = dp[coins.length-1][amount];
        
        
        return ans >=(int)Math.pow(10,9)?-1:ans;
    }
}
                            
                            
                            
                            
//space optimisation 
class Solution {
    public int coinChange(int[] coins, int amount) {
        
        int prev[]= new int[amount+1];
        int curr[]= new int[amount+1];
        //base condition 
        for(int target = 0 ; target<=amount;target++){
            
            if(target % coins[0]==0)
                curr[target]  = target/coins[0];
            else
                curr[target]=(int)Math.pow(10,9);
        }
        
        for(int i = 0 ; i < coins.length;i++){
            
            for(int j=0;j <= amount;j++){
                
                int take = Integer.MAX_VALUE;
                
                if(j-coins[i] >= 0){
                    take = Math.min(take,1+curr[j-coins[i]]);
                }
                                                 

                int notTake = prev[j];

                prev[j] = Math.min(take,notTake);

            }
            prev=curr;
        }
        int ans = prev[amount];
        
        
        return ans >=(int)Math.pow(10,9)?-1:ans;
    }
}
                            
    
