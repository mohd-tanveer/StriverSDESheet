
class Solution {
    public int minPathSum(int[][] grid) {
        
        int[][] dp = new int[grid.length][grid[0].length];
        for(int[] row:dp) Arrays.fill(row,-1);
        return solve(grid,grid.length-1,grid[0].length-1,dp);
    }
    
    static int solve(int[][] grid, int i , int j, int[][] dp){
        //base condition // we will move bottom right to top left
        if(i == 0 && j == 0) return grid[i][j];
        //boundary case
        if(i<0 || j<0 ) return 20000; //big number
        
        if(dp[i][j] != -1) return dp[i][j];
        
        //move up
        int up = grid[i][j]+solve(grid,i-1,j,dp);
        int left = grid[i][j]+solve(grid,i,j-1,dp);
        
        return dp[i][j] = Math.min(up,left);
        
    }
}

//TABULAR
class Solution {
    public int minPathSum(int[][] grid) {
        
        int m  =grid.length;
        int n  =grid[0].length;
        
        int[][] dp = new int[m][n];
        
        //let's do the tabulation 
        //step1 write base conditiion 
        dp[0][0] = grid[0][0];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(i == 0 && j == 0) continue;
                //copy the recurrence
                int up=Integer.MAX_VALUE,left=Integer.MAX_VALUE;
                if(i>0)
                    up = grid[i][j]+dp[i-1][j];
                if(j>0)
                    left = grid[i][j]+dp[i][j-1];

                dp[i][j] = Math.min(up,left);
            }
        }
        
        return dp[m-1][n-1];
    }
    

}
