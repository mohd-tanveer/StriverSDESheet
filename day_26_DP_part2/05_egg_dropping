//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GfG { 
    
	public static void main (String[] args) throws IOException  {
	    
	    //reading input using BufferedReader class
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		//reading total testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    
		    //reading number of eggs and floors
		    String inputLine[] = br.readLine().trim().split(" ");
		    
		    int n = Integer.parseInt(inputLine[0]);
		    int k = Integer.parseInt(inputLine[1]);
		    
		    //calling eggDrop() method of class
		    //EggDrop
		    System.out.println(new Solution().eggDrop(n, k));
		}
	}
}



// } Driver Code Ends


class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int e, int f) 
	{
	    // Your code here
	    //n = identical eggs
	    //k i number of floor
	    //if number of eggs 0 then we can not tell number of steps
	   //base condition 
	   int[][] dp = new int[e+1][f+1];
	   for(int[] row: dp) Arrays.fill(row,-1);
	   return solve(e,f,dp);
	    
	}
	static int solve(int e,int f, int[][] dp){
	    if(f==0 || f==1){
	        return f;
	    }
	    if(e == 1) return f;//if only one egg is there then we need maximum attempts(all the floor starting from 1st)
        
        if(dp[e][f] != -1) return dp[e][f];
	    int min = Integer.MAX_VALUE;
	    for(int k = 1; k<=f;k++){
	        int eggNotBreak = solve(e,f-k,dp);
	        int eggBreak =    solve(e-1,k-1,dp);
	        //adding one for each floor it's attempt needs to be added
	        int tempMin =  1 + Math.max(eggNotBreak,eggBreak);
	        
	        min  = Math.min(min,tempMin);
	    }
	    
	   return dp[e][f] = min;
	}
	
}
