//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
public class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n;
                    n = sc.nextInt();
                    ArrayList<String> arr = new ArrayList<String>();
                    for(int i = 0;i<n;i++)
                        {
                            String p = sc.next();
                            arr.add(p);
                        }
                    String line = sc.next();
                    Sol obj = new Sol();  
                    System.out.println(obj.wordBreak(line,arr));  
                    
                }
        }
}
// } Driver Code Ends


//User function Template for Java

class Sol
{
    public static int wordBreak(String A, ArrayList<String> B )
    {
        //code here
        HashSet<String> set = new HashSet<>(B);
        return isWordbreakPossible(A,set,0,A.length())?1:0;
    }
    
    static boolean isWordbreakPossible(String A, HashSet<String> set, int ind, int n){
        if(ind==n) return true;//we have reached the end 
        
      
        for(int i=ind;i<n;i++){
            if(set.contains(A.substring(ind,i+1))){
                if(isWordbreakPossible(A,set,i+1,n)){
                    return true;
                }
            }
        }
        return false;
    }
}
public static int wordBreak(String A, ArrayList<String> B )
    {
        //code here
        HashSet<String> set = new HashSet<>(B);
        boolean[] dp = new boolean[A.length()];
        //Arrays.fill(dp,-1);
        return isWordbreakPossible(A,set,0,A.length(),dp)?1:0;
    }
    
    static boolean isWordbreakPossible(String A, HashSet<String> set, int ind, int n,boolean[] dp){
        if(ind==n) return true;//we have reached the end 
        
        if(dp[ind] == true) return dp[ind];
        for(int i=ind;i<n;i++){
            if(set.contains(A.substring(ind,i+1))){
                if(isWordbreakPossible(A,set,i+1,n,dp)){
                    return dp[ind] = true;
                }
            }
        }
        return dp[ind] = false;
    }
}


//tabulation 
//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
public class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n;
                    n = sc.nextInt();
                    ArrayList<String> arr = new ArrayList<String>();
                    for(int i = 0;i<n;i++)
                        {
                            String p = sc.next();
                            arr.add(p);
                        }
                    String line = sc.next();
                    Sol obj = new Sol();  
                    System.out.println(obj.wordBreak(line,arr));  
                    
                }
        }
}
// } Driver Code Ends


//User function Template for Java

class Sol
{
    public static int wordBreak(String A, ArrayList<String> B )
    {
        //code here
        HashSet<String> set = new HashSet<>(B);
        int n = A.length();
        boolean[] dp = new boolean[n+1];
        //Arrays.fill(dp,-1);
        dp[n] = true;
        for(int ind=n-1;ind >=0;ind--){
            for(int i=ind;i<n;i++){
                if(set.contains(A.substring(ind,i+1))){
                    if(dp[i+1]){
                     dp[ind] = true;
                    }
                }
            }
            
        }
        return dp[0]?1:0;
    }
    
}
