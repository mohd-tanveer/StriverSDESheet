
class Solution {
    public int minCost(int n, int[] cuts) {
        //question of partition dp 
        int[] newArray = new int[cuts.length+2];
        newArray[0]=0;
        newArray[newArray.length-1] = n;//to calcualte the size of the stick cuts[j+1] - cuts[i-1]
        int i=1;
        for(int a:cuts){
            newArray[i++] = a;
        }
        Arrays.sort(newArray);//to solve independently 
        
        int[][] dp = new int[cuts.length+1][cuts.length+1];
        for(int[] r : dp) Arrays.fill(r,-1);
        
        return solve(newArray,1,cuts.length,dp);
    }
    
    static int solve(int[] cutsArr, int si , int ej,int[][] dp){
        
        if(si>ej) return 0;
        
        if(dp[si][ej] !=-1) return dp[si][ej];
        
        int min = Integer.MAX_VALUE;
        for(int ind = si; ind <= ej; ind++){
            
            int cost = (cutsArr[ej+1]-cutsArr[si-1])
                + solve(cutsArr,si,ind-1,dp) + solve(cutsArr,ind+1,ej,dp);
            

            min = Math.min(cost,min);
            
        }
        return dp[si][ej]=min;
    }
   
}


//tabulation 
class Solution {
    public int minCost(int n, int[] cuts) {
        //question of partition dp 
        int[] newArray = new int[cuts.length+2];
        newArray[0]=0;
        newArray[newArray.length-1] = n;//to calcualte the size of the stick cuts[j+1] - cuts[i-1]
        int x=1;
        for(int a:cuts){
            newArray[x++] = a;
        }
        Arrays.sort(newArray);//to solve independently 
        int m = cuts.length;
        int[][] dp = new int[m+2][m+2];
        
    
        
        // si is going 1 to n so since dp is bottom up it must go from n to 1
        // sj is starting n and going till 1.
        
        for(int i=m;i>=1;i--){
            for(int j = 1;j<=m;j++){
                if(i>j) continue;//already stored zero by defaut
                
                int min = Integer.MAX_VALUE;
                for(int ind = i; ind <= j; ind++){

                    int cost = (newArray[j+1]-newArray[i-1])
                        + dp[i][ind-1] + dp[ind+1][j];


                    min = Math.min(cost,min);

                }
                dp[i][j]=min;
            }
        }
        
        return dp[1][cuts.length];
    }
    
    
}
