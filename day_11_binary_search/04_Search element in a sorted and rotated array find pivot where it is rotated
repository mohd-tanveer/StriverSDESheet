class Solution {
    public int search(int[] nums, int target) {
        //simple solution would be o(n) by traversing like an array
        // the catch is at standing any postion we can check if the left half is sorted or not , if it is 
        //sorted we can check if the value is present is presnet in the left side or not if not go on search in the right side 
        //if the left half is not sorted it means right half hsould be sorted go and check on in right side 
        int low =0;
        int high = nums.length-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(nums[mid]==target){
                return mid;
            }
            //if left side is sorted 
            if(nums[mid] >= nums[low]){ // >= what if there is only one element 
                //and nums belongs to left side 
                if(target >= nums[low] && target <= nums[mid]){
                high = mid -1;
                }else{
                    //go search in the right side 
                    low = mid+1;
                }
            }else{//right half is sorted 
                if(target>=nums[mid] && target<=nums[high]){
                    low =mid +1;
                }else{
                    high = mid-1;
                }
                
            }
        }
        return -1;
    }
}
