class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // since the array is sorted we can try to pick half elements combines 
        // such that the partition is correct it means the left half is valid or not 
        // all the elements in left should be less than all the element in right side
        /*  1 3 4 7 10 12
            2 3 6 5 
            total element is 10 hence our ans will be average of left partitions last value and right partitions first value , if the number was odd we would have take last element of first half
            
            to form correct left half  ,
            since left half both last will max so choose max(l1,l2) + min(R1,R2) //right half of both is minimum
         1 3 4  7| 10 12 
         2     | 3 6 15
         
         1  3  4 |  7 10 12
         2 3 | 6 15
         
         1 3 | 4 7 10 12
         2 3 6 | 15
         
         so only second is correct partition 
         let's say when we pick no element from one of the array so for the comparison assing INT_MIN
         similarly if all the element is picked from one of array hence for comparison with next elemetn assign to INT_MAX
         
        */
        // find the valid parition 
        
        //always take minimum length of array as your n1
        if(nums1.length > nums2.length) return findMedianSortedArrays(nums2,nums1);//another way of swapping
        int n1 = nums1.length;
        int n2 = nums2.length;
        int low = 0;
        int high = n1;
       
        while(low<=high){
            int cut1 = (high+low)/2;
            int cut2 = ((n1+n2+1))/2 -(cut1);//because we need half - cut1
            
            int left1 =  (cut1 > 0) ?  nums1[cut1-1] : Integer.MIN_VALUE ; //check for edge case and assign min
            int right1 = (cut1 < n1)? nums1[cut1]:Integer.MAX_VALUE ;  //check for edge case and assign max
            
            int left2 = cut2 > 0 ? nums2[cut2-1] : Integer.MIN_VALUE ; //check for edge case and assign min
            int right2 = cut2 < n2 ? nums2[cut2] : Integer.MAX_VALUE ; //check for edge case and assign max
            
            if(left1<=right2 && left2<=right1){
                //it means we have valid partition
                if((n1+n2)%2==0){//check if there is even numbers 
                    //it mens we need average of middle two which means we need max from left of both min from right of both
                    return (double)(Math.max(left1,left2) + Math.min(right1,right2))/2.0;
                }else{//odd numbers which means we need to return middle nothing but max from left partition
                   
                    return Math.max(left1,left2); 
                }
            }else if(left1>right2){//it is not a valid partition and left1> right2
                high = cut1-1;//reduce the value from array 1
            }else{
                low = cut1+1; // we want to increase the value from array 1
            }
        }      
        
        return 0.0; 
    }
}
