/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        //everytime we will have to create a node
        ListNode head,currentNode = null;
        if(list1==null && list2==null){
            return list1;
        }
        if(list1 ==null ){
            return list2;
        }
        if(list2==null){
            return list1;
        }
        //for the first ever value
        if(list1.val<list2.val){
            ListNode newNode = new ListNode(list1.val);
            head=newNode;
            currentNode=newNode;
            list1=list1.next;
        }else{
            ListNode newNode = new ListNode(list2.val);
            head=newNode;
            currentNode=newNode;
            list2=list2.next;  
        }
        while(list1 !=null && list2!=null ){
            if(list1.val<list2.val){
                ListNode newNode = new ListNode(list1.val);
                currentNode.next=newNode;
                currentNode=newNode;
                list1=list1.next;
                
            }else{
                ListNode newNode = new ListNode(list2.val);
                currentNode.next=newNode;
                currentNode=newNode;
                list2=list2.next;
            }
        }
        while(list1!=null){
            ListNode newNode = new ListNode(list1.val);
            currentNode.next=newNode;
            currentNode=newNode;
            list1=list1.next;
        }
        while(list2!=null){
            ListNode newNode = new ListNode(list2.val);
            currentNode.next=newNode;
            currentNode=newNode;
            list2=list2.next;
        }
        return head;
    }
}
