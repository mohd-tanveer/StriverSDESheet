/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode headOfL1 = l1;
        ListNode headOfL2 = l2;
        ListNode head,currentNode =null;
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        if(l1==null || l2 ==null){
            return l1;
        }
        int carry=0;
         
            int rem =(l1.val+l2.val+carry)%10;
            carry=(l1.val+l2.val+carry)/10;
            ListNode temp = new ListNode(rem);
            head = temp;
            currentNode = temp;
            l1 =l1.next;
            l2 =l2.next;

        while(l1!=null && l2!=null){
            

            rem =(l1.val+l2.val+carry)%10;
            carry=(l1.val+l2.val+carry)/10;
            ListNode newNode = new ListNode(rem);
            currentNode.next = newNode;
            currentNode = newNode;
            l1 =l1.next;
            l2 =l2.next;
        }
        while(l1!=null){
            rem =(l1.val+carry)%10;
            carry=(l1.val+carry)/10;
            ListNode newNode = new ListNode(rem);
            currentNode.next = newNode;
            currentNode = newNode;
            l1 =l1.next;
        }
        while(l2!=null){
            rem =(l2.val+carry)%10;
            carry=(l2.val+carry)/10;
            ListNode newNode = new ListNode(rem);
            currentNode.next = newNode;
            currentNode = newNode;
            l2 =l2.next;
        }
        //after finishing the both linkedList if there still nodes left
        if(carry!=0){
            ListNode newNode = new ListNode(carry);
            currentNode.next = newNode;
            currentNode = newNode;
        }
        return head;

        
    }
}



//same soultion with more optimized code
