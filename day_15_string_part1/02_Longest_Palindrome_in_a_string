class Solution {
    
    public String longestPalindrome(String s) {
        
        String[] maxString = new String[1];
        maxString[0] = "";
        int dp[] = new int[s.length()];
        Arrays.fill(dp,-1);
        solveHelper(s,0,s.length(),maxString,dp);
        
        return maxString[0];
        
    }
    private void solveHelper(String s, int start, int end,String[] maxString,int[] dp) {
        if(start>=end) return;
        
        if(dp[start] != -1) return;
        for(int i = start;i<end;i++){
            if(isPlandromic(s,start,i)){
                String str = s.substring(start,i+1);
                if(str.length() > maxString[0].length())
                    maxString[0] = str;
                solveHelper(s,i+1,end,maxString,dp);
            }
        }
        dp[start] = maxString[0].length();
        
    }
    
    private boolean isPlandromic(String s, int start, int end){
        while(start<end){
                if(s.charAt(start++) != s.charAt(end--)) return false;
            }
        return true;
    }
}


//solution by kaushik(java brains)

class Solution {
    
    private int lo,maxLen;
    public String longestPalindrome(String s) {
        
        int len = s.length();
        if (len < 2)
            return s;

        //using the concept of middle 
        for (int i = 0; i < len-1; i++) {
            extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
            extendPalindrome(s, i, i+1); //assume even length.
        }
        return s.substring(lo, lo + maxLen);
}

    private void extendPalindrome(String s, int j, int k) {
        while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
            j--;
            k++;
        }
        
        //what ever is the length just take it 
        if (maxLen < k - j - 1) {
            lo = j + 1;
            maxLen = k - j - 1;
        }
    }
}
