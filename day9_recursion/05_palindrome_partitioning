class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> path = new ArrayList<String>();
        //ecample aabb
        function(0,s,path,result);
        return result;
    }
    static void function(int index, String s, List<String> path, List<List<String>> result){
        if(index==s.length()){
            result.add(new ArrayList<>(path));
            return;
        }
        for(int i = index; i<s.length(); i++){
            if(isPalindrome(s,index,i)){
                //if allowed add to the path and call the recursion on rest of the string  
                path.add(s.substring(index,i+1));
                function(i+1,s,path,result);
                path.remove(path.size()-1);
                
            }
        }
        
    }
    
    static boolean isPalindrome(String s, int start, int end){
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)){
                return false;
            }
        }
        return true;

    }
}
