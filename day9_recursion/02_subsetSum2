class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        
        Set<List<Integer>> res = new HashSet<>();
        List<Integer> set = new ArrayList<>();
        powerSet(0,set,nums,res);
        List<List<Integer>> result  = new ArrayList<>(res);
        return result;
        
    }
    static void powerSet(int index, List<Integer> set, int[] nums,  Set<List<Integer>> res ){
        //base condition when index crosses n 
        if(index == nums.length){
            res.add(new ArrayList<>(set));
            return;
        }
        //take it 
       // System.out.println(" index " + index);
        set.add(nums[index]);
        powerSet(index+1, set, nums, res);
        
        //not take it
        set.remove(set.size()-1);
        powerSet(index+1, set, nums, res);

        
    }
}

above solution is not fully correct

//better and optimized solution 



class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);//to remove the duplicates while traversing 
        List<List<Integer>> res  = new ArrayList<>();
        powerSet(res,new ArrayList<>(),nums,0);
        return res;
        
    }
    static void powerSet(List<List<Integer>> result, List<Integer> ds, int[] nums, int index){
        //add the deep copy into the result 
        result.add(new ArrayList<>(ds));
        for(int i = index ; i<nums.length; i++){
            if(i > index && nums[i]==nums[i-1]) continue;
            ds.add(nums[i]);
            powerSet(result,ds,nums,i+1);
            ds.remove(ds.size()-1);
            
        }

        
    }
}


//recursion way
so if we are not taking an element/ignoring the element , hence to avoid duplicate we should also ignore all the next values which are same as this value .


class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        helper(res,new ArrayList<>(),nums,0,false);
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> ls, int[] nums, int pos, boolean choosePre) {
        if(pos==nums.length) {
            res.add(new ArrayList<>(ls));
            return;
        }
        helper(res,ls,nums,pos+1,false);  //do not pick 
        if(pos>=1 && nums[pos]==nums[pos-1] && !choosePre) return; //if previous is not chosen we will not choose as well
        //if the current value is same as previous value and we have ignored the previous value then we should ignore this time as well.
        ls.add(nums[pos]);
        helper(res,ls,nums,pos+1,true);
        ls.remove(ls.size()-1);
    }
}





//more easy 

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        helper(res,new ArrayList<>(),nums,0,false);
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> ls, int[] nums, int pos, boolean choosePre) {
        if(pos==nums.length) {
            res.add(new ArrayList<>(ls));
            return;
        }
        
        //pick it 
        ls.add(nums[pos]);
        helper(res,ls,nums,pos+1,true);
        ls.remove(ls.size()-1);
        
        //don't pick it say 1,2,2,3 --> if we are not picking first 2 we should be ignoring second 2 as well
        
        while(pos+1 < nums.length && nums[pos]==nums[pos+1]){
            pos++;
        }
        
        helper(res,ls,nums,pos+1,true);
        
    }
}



















