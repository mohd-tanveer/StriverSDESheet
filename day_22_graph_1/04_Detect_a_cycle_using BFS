import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        boolean[] vis = new boolean[n+1];
        Arrays.fill(vis,false);
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        //creating adjacency list
        for(int i =0; i<=n ;i++){
            ArrayList<Integer> ar = new ArrayList<>();
            adj.add(ar);
        }
        //taking edges pair wise and creating adj list [[0,1],[1,2]]
        for(int i = 0; i<edges.length; i++){
            int a = edges[i][0];
            int b = edges[i][1];
            ArrayList<Integer> temp = adj.get(a);
            temp.add(b);
            ArrayList<Integer> temp2 = adj.get(b);
            temp2.add(a);
        }
        Queue<Node> q = new LinkedList<>();
        for(int i =1; i<=n;i++){
            if(!vis[i]){
                q.add(new Node(i,-1));//node and it's parent 
                vis[i] = true; 
            }
            while(!q.isEmpty()){
                Node node = q.poll();
                int curr = node.first;
                int par = node.second;
                for(Integer it:adj.get(curr)){
                    if(!vis[it]){
                        q.add(new Node(it,curr));//the parent will n
                        vis[it] = true;
                    }else{
                        if(it != par){
                            //which means there is cycle
                           return "Yes";               
                        }
                    }
                }
            }
            
        }
        return "No";
    }
    
}

class Node{
        int first;
        int second;
        Node(int f, int s){
            first = f;
            second = s;
        }
    }
    
