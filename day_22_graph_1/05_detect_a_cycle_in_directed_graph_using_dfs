import java.util.*;
public class Solution {
  public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {
    // Write your code here.
      ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
      for(int i =0; i<=n ;i++){
            ArrayList<Integer> ar = new ArrayList<>();
            adj.add(ar);
        }
      
      for(int i=0;i<edges.size();i++){
          int a  = edges.get(i).get(0);
          int b = edges.get(i).get(1);
          adj.get(a).add(b);
      }
      int[] vis = new int[n+1];
      int[] selfDfs = new int[n+1];
      Arrays.fill(vis,0);
      Arrays.fill(selfDfs,0);
      for(int i = 1; i<=n;i++){
          if(vis[i] == 0){
              if(checkForCycle(i,vis,selfDfs,adj)){
                  return true;
              }
          }
      }
      return false;
  }
    static boolean checkForCycle(int node, int[] vis, int[] selfDfs, ArrayList<ArrayList<Integer>> adj){
        vis[node] = 1;
        selfDfs[node] = 1;
        for(Integer it: adj.get(node)){
            if(vis[it] == 0){
                if(checkForCycle(it,vis,selfDfs,adj)){
                    return true;
                }
            }else if(selfDfs[it] == 1){
                return true;
            }
        }
        //else if it's not loop and recursive call ends 
        selfDfs[node] = 0;
        return false;
    }
    
}
