// { Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}

class GfG {
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int w = Integer.parseInt(inputLine[1]);
            Item[] arr = new Item[n];
            inputLine = br.readLine().trim().split(" ");
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Item(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            System.out.println(String.format("%.2f", new Solution().fractionalKnapsack(w, arr, n)));
        }
    }
}// } Driver Code Ends


/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        double result = 0.0;
        //Arrays.sort(arr,(a,b)-> (b.value/b.weight)-(a.value/a.weight));
        //this works only for integer values 
        
        Arrays.sort(arr, (a,b)->{
            double r1 = (double)(a.value) / (double)(a.weight); 
            double r2 = (double)(b.value) / (double)(b.weight); 
            if(r1 < r2) return 1; 
            else if(r1 > r2) return -1; 
            else return 0; 
        });
           
        //System.out.println(arr[0].value+" " +" "+ arr[0].weight);
        for(int i =0 ; i< n ;i++){
            if(W>0 && W-arr[i].weight>=0){
                result =result + arr[i].value;
                W = W - arr[i].weight;
                //System.out.println(W+" "+" "+result);
            }else if (W>0 && W-arr[i].weight<0){
                result = result + ((double)arr[i].value/(double)arr[i].weight)*(W);
                W = W - arr[i].weight;
                ////System.out.println(W+" "+" "+result);
                break;
            
            }
        }
        return result;
    }
}
