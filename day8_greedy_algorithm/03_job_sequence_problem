// { Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
    
        //let's count number of unique deadlines 
        int ud = 0;
        
        for(int i =0 ; i<n ; i++){
            if(arr[i].deadline>ud){
                ud = arr[i].deadline;
            }
        }
        //use an array to store jobs 
        int jobSeq[] = new int[ud];
        Arrays.fill(jobSeq,-1);
        //System.out.println(Arrays.toString(jobSeq));
        //System.out.println("ud"+ud);
        //sort the array according to the profit 
        Arrays.sort(arr,(a,b)->b.profit-a.profit);
        int maxProfit=0;
        int countJob = 0;
        for(int i =0 ; i < n ;i++){
            //start with deadline and find if at the deadline or at below positions we have empty location to 
            //perfrom the job
            for(int j = arr[i].deadline-1; j>= 0;j--){
                //if empty slot it found 
            if(jobSeq[j]==-1){
                //doing a job at last moment 
               countJob++;
               jobSeq[j] =  arr[i].id;
               maxProfit = maxProfit + arr[i].profit;
               break;
            }
            }
        }


        return new int[]{countJob,maxProfit};
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
