class Solution {
    public int uniquePaths(int m, int n) {
    return countPaths(0,0,m,n);
    }
    static int countPaths(int i,int j,int m,int n){
            if(i==m-1 && j==n-1){return 1;}
            if(i>=m || j>=n){return 0;}
            else{
                //go down and go right
                return countPaths(i+1,j,m,n) + countPaths(i,j+1,m,n);
            }
        }
}
//this is the recursive solution but time limit exceeds 

//using dynamic programming 

class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        
    return countPaths(0,0,m,n,dp);
    }
    //use dp for visted nodes 
    static int countPaths(int i,int j,int m,int n,int[][] dp){
            if(i==m-1 && j==n-1){return 1;}
            if(i>=m || j>=n){return 0;}
            
            if(dp[i][j]!=-1){return dp[i][j];}
            else{
                //go down and go right
                return dp[i][j]=countPaths(i+1,j,m,n,dp) + countPaths(i,j+1,m,n,dp);
            }
        }
}
