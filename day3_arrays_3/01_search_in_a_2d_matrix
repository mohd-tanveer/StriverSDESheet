class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //in o(n^2) we can search for the target
        int row = matrix.length;
        int col = matrix[0].length;
        //find in which rows the value is presnet 
        int atRow= -1; 
        System.out.println("row"+row);
        System.out.println("col"+col);

        
        boolean valueIsPresent=false;
        for(int i =0;i<row;i++ ){
            if(matrix[i][col-1]>=target){
                atRow =i;
                System.out.println("atRow"+atRow);
                break;
            }
        }
                //System.out.println("atrow"+atRow);
        if(atRow==-1){
            return false;
        }
        
        for(int j=0;j<col;j++){
            if(target==matrix[atRow][j]){
                valueIsPresent =true;
            }
        }
        return valueIsPresent;
        
    }
}





//striver solution 
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        //approach 2 is to store the data into array using and use binary search but that would take extra space complexity, or we can use imaginary indexy 
        int row = matrix.length;
        if(row==0)
            return false;
        int col = matrix[0].length;
        
        int low = 0;
        int high = row*col-1;
        
        while(low<=high){
            int mid = low+(high-low)/2;
            if(matrix[mid/col][mid%col]==target){
                return true;
            }
            if(matrix[mid/col][mid%col]<target){
                //search right
                low = mid+1;
            }
            else{  //(matrix[mid/col][mid%col]>target)
                high = mid-1;;
            }
        }
        return false;
        
    }
}
