
// Morris Traversal takes o(n) time and o(1) space, it is concept of Threaded Binary Tree

        1
       /  \
      2     3
     /  \
    4    5
           \
            6
            
   4 2 4 6 1 3
   
   Left , Root , Right
   case1:  left--> null print() root , and then move -->right
   case2:  we can only go to left , if right most guy is connected to curr say root, in above example 6 should be connected
          curr = cur->left (thread , creating thread )
          |
          |__ if current is connected to thread we need to remove the thread and move right, cur = cur-> right
          
          
   
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans  = new ArrayList<>();
        TreeNode curr  = root;
        while(curr != null){
            //case 1
            if(curr.left == null){
                ans.add(curr.val);//it is root 
                curr = curr.right;
            }else{
                //if left subtree exist we need to make thread 
                TreeNode prev = curr.left;
                while(prev.right !=null && prev.right != curr){
                    prev  = prev.right;
                }
                if(prev.right == null){
                    prev.right = curr;//make a connection to its root
                    curr = curr.left;// and start traversing left 
                }else{
                    //when curr is pointnig to itslef , means we need to break the thread
                    prev.right  = null;
                    //becasue we came back so visiting the root
                    ans.add(curr.val);
                    curr  = curr.right;
                }
            }
        }
        return ans;
    }
}
