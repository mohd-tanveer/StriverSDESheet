// this solution is recursive approach 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        //pre order traversal means return the RLR(root,left, right)
        List<Integer> ans  = new ArrayList<>();
        preorder(root,ans);
        return ans;
        
    }
    static void preorder(TreeNode node, List<Integer> ans){
        if(node==null){
            //we have reached to the end 
            return;
        }
        ans.add(node.val);
        //goto left child
        preorder(node.left,ans);
        preorder(node.right,ans);
        
    }
}

//Iterative solution 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        //pre order traversal means return the RLR(root,left, right)
        List<Integer> ans  = new ArrayList<>();
        Stack<TreeNode> stack  = new Stack<>();// since stack works as fifo , so we pull push  right and then left after first elemt  
        //cause after root we need left element 
        if(root == null){
            return ans;
        }
        
        stack.push(root);
        TreeNode node = root;
        while(!stack.isEmpty()){
            node = stack.pop();
            ans.add(node.val);
            if(node.right != null){
                stack.push(node.right);
            }
            if(node.left != null ){
                stack.push(node.left);
            }
        }
        
        return ans;
    }
}



