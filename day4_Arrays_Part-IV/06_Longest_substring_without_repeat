class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<String> hs  = new HashSet<>();

        if(s.length()<1){
            return 0;
        }
        String[] arr = s.split("");
        int maxCount=0;
        int j=0;
        for(int i=0; i<arr.length;i++){
            
            if(hs.contains(arr[i])){
                
                while(j<i && hs.contains(arr[i])){
                    System.out.println(hs.remove(arr[j]));
                    System.out.println("j "+j);
                    j++;
                    
                }
            }
            hs.add(arr[i]);//any ways repetition won't matter 
            System.out.println("i "+i);
            maxCount = Math.max(maxCount,i-j+1);
        }
        
        
        return maxCount;
        
    }
}


appraoch2
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<String,Integer> hs  = new HashMap<>();
        //let's reduce time complextity instead of doing j++ n times let's store the location and move directly to the next index

        if(s.length()<1){
            return 0;
        }
        String[] arr = s.split("");
        int maxCount=0;
        int j=0;
        for(int i=0; i<arr.length;i++){
            
            if(hs.containsKey(arr[i])){
                //what if for input like tmmzuxt here j is already greater so we are adding unnecessary instead choose maximum
                j = Math.max(hs.get(arr[i])+1,j);
                System.out.println("j "+j +" arr[%d] " +arr[i]);

            }
            hs.put(arr[i],i);//store the latest index 
            maxCount = Math.max(maxCount,i-j+1);
        }
        
        
        return maxCount;
        
    }
}
