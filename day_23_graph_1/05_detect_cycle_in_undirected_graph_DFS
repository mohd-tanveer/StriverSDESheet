import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        Boolean[] vis = new Boolean[n+1];
        Arrays.fill(vis,false);
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        //creating adjacency list
        for(int i =0; i<=n ;i++){
            adj.add( new ArrayList<>());
        }
        //taking edges pair wise and creating adj list [[0,1],[1,2]]
        for(int i = 0; i<edges.length; i++){
            int a = edges[i][0];
            int b = edges[i][1];
            ArrayList<Integer> temp = adj.get(a);
            temp.add(b);
            ArrayList<Integer> temp2 = adj.get(b);
            temp2.add(a);
        }
        boolean flag = false;
        for(int i = 1; i<=n;i++){
            if(vis[i]==false){
                if(isCycle(i,-1,vis,adj)){
                    return "Yes";
                }
            }
        }
            return "No";
  }

    static boolean isCycle(int node, int par, Boolean[] vis, ArrayList<ArrayList<Integer>> adj){
        vis[node]=true;//visted
        for(Integer it : adj.get(node)){
            if(vis[it]==false){
                if(isCycle(it,node,vis,adj)==true) return true;
                else if(it != par) return true;
            }
        }
        return false;
    }
    
}

//same logic we can use for DFS
