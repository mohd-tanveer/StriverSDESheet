class Solution {
    public boolean canFinish(int n, int[][] edges) {
        //we can treat this question as cycle dection , if there is cyclic dependency between two course we can say that the graph contains cycle
    List<List<Integer>> adj = new ArrayList<>();
      for(int i =0; i<n ;i++){
            List<Integer> ar = new ArrayList<>();
            adj.add(ar);
        }
      //adacency list 
      
      for(int i=0;i<edges.length;i++){
          int a  = edges[i][0];
          int b = edges[i][1];
          adj.get(a).add(b);
      }
      int[] indegree = new int[n+1];
      Arrays.fill(indegree,0);
      for(int i=0;i<n;i++){
          for(Integer it: adj.get(i)){
              indegree[it]++;
          }
      }
      int count = 0;
      Queue<Integer> q = new LinkedList<>();
      for(int i =0;i<n;i++){
          if(indegree[i]==0){
              q.add(i);
          }
      }
      while(!q.isEmpty()){
          Integer node  = q.poll();
          count++;
          for(Integer it: adj.get(node)){
              //for that particular node decreament the indegrees
              if(--indegree[it]==0)
                  q.add(it);
          }
      }
      if(count==n) return true;//no cycle 
      return false;//cycle dected hence can't finish 
  }
}
      
