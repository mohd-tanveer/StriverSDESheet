class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board  = new char[n][n];
        helper(board,result,0);
        return result;
    }
    static void helper(char[][] board, List<List<String>> result, int col){
        //save in case we have reached at the end of the column because we are traveling row wise 
        if(col==board.length){
            saveBoard(board, result); //save the ans 
            return ;
        }
        for(int row =0; row <board.length; row++){
            //is it safe to put the queen at the given index 
            if(isSafe(row,col,board)){
                board[row][col] = 'Q';
                helper(board, result, col+1);
                //backtrack 
                board[row][col] = '.';
            }
        }
    }
    
    static boolean isSafe(int row, int col, char[][] board){
        //check if there is no queen available at horizontally 
        for(int j = 0; j<board.length ; j++){
            if(board[row][j]=='Q'){
                return false;
            }
        }
        
        // check vertically if there is any queen available 
        for(int i =0 ;i <board.length ; i++){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        //check left upper diagonal and left lower diagonal because there won't be any element at right upper or right lower
        //left upper row--, col--
        int i =row;
        for(int j =col; j>=0 && i>=0 ; j--,i--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        //left lower  row++, col--
        i =row;
        for(int j =col; j>=0 && i<board.length ; j--,i++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
    static void saveBoard(char[][] board, List<List<String>> result){
        //save the data row wise
        List<String> newboard = new ArrayList<>();
        for(int i=0; i< board.length; i++){
            String row = "";
            for(int j=0; j<board.length;j++){
                if(board[i][j]=='Q'){
                    row = row + 'Q';
                }else{
                    row = row + '.';
                }
            }
            newboard.add(row);
           // newboard.forEach(System.out::println);
        }
        
        result.add(newboard);
    }
}
