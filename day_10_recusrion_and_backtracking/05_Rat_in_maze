// { Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> result = new ArrayList<>();
        int[][] vis = new int[n][n];
        //if last location or first location is zero
        if(m[0][0]==0 || m[n-1][n-1]==0) return result;
        for(int[] row: vis){
            Arrays.fill(row,0);
        }
        solve(0,0,m,result,n,"",vis);
        return result;
    }
    
    static void solve(int i, int j, int[][] m, ArrayList<String> result, int n, String s, int[][] vis){
        if(i==n-1 && j ==n-1){
            result.add(s);
            return;
        }
        //move downward
        if(i+1<n && vis[i+1][j]==0 && m[i+1][j]==1 ){
            vis[i][j]=1;
            solve(i+1,j,m,result,n,s+'D',vis);
            vis[i][j] = 0;
        }
        //move upward
        if(i-1>=0 && vis[i-1][j]==0 && m[i-1][j]==1 ){
            vis[i][j] = 1;
            solve(i-1,j,m,result,n,s+'U',vis);
            vis[i][j] = 0;
        }
        //move right
        if(j+1<n && vis[i][j+1]==0 && m[i][j+1]==1){
            vis[i][j]=1;
            solve(i,j+1,m,result,n,s+'R',vis);
            vis[i][j] = 0;
        }
        //move left
        if(j-1>=0 && vis[i][j-1]==0 && m[i][j-1]==1){
            vis[i][j]=1;
            solve(i,j-1,m,result,n,s+'L',vis);
            vis[i][j] = 0;
        }
        
    }
}



instead of wrting upward downward left right  we can use shortcut
di = {+1,0,0,-1};
dj = {0,-1,+1,0};

String dir = "DLRU";
    for (int ind = 0; ind < 4; ind++) {
      int nexti = i + di[ind];
      int nextj = j + dj[ind];
      if (nexti >= 0 && nextj >= 0 && nexti < n && nextj < n &&
        vis[nexti][nextj] == 0 && a[nexti][nextj] == 1) {

        vis[i][j] = 1;
        solve(nexti, nextj, a, n, ans, move + dir.charAt(ind), vis, di, dj);
        vis[i][j] = 0;

