import com.sun.tools.javac.Main;

import javax.print.CancelablePrintJob;
import java.util.*;
import java.util.stream.IntStream;

public class main {
    public static void main(String[] args) {
        int arr[] = {5, 3, 2, 1, 4};
        int n = 5;
        int[] temp = new int[n];
        int ans = merge_Sort(arr, temp, 0, n - 1);
        System.out.println(ans);

    }

    static int merge(int arr[], int temp[], int left, int mid, int right) {
        int inv_count = 0;
        int i = left;
        int j = mid;
        int k = left;
        while ((i <= mid - 1) && (j <= right)) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                //while merging if right element is smaller that means a[i]>a[j] and i<j so we can directly add the counts
                inv_count = inv_count + (mid - i);
            }
        }

        while (i <= mid - 1)
            temp[k++] = arr[i++];

        while (j <= right)
            temp[k++] = arr[j++];

        for (i = left; i <= right; i++)
            arr[i] = temp[i];

        return inv_count;
    }

    static int merge_Sort(int arr[], int temp[], int left, int right) {
        int mid, inv_count = 0;
        if (right > left) {
            mid = (left + right) / 2;

            inv_count += merge_Sort(arr, temp, left, mid);
            inv_count += merge_Sort(arr, temp, mid + 1, right);

            inv_count += merge(arr, temp, left, mid + 1, right);
        }
        return inv_count;
    }
}

