class MinStack {
    
    Stack<Pair> stack = new Stack<>();

    public MinStack() {
        
    }
    
    public void push(int val) {
        if(!stack.isEmpty()){
            Pair p = stack.peek();
            stack.push(new Pair(val, Math.min(p.minVal,val)));  
        }else{
            stack.push(new Pair(val,val));
        }         
    }
    
    public void pop() {
        stack.pop();
    }
    
    public int top() {
        return stack.peek().val;
    }
    
    public int getMin() {
        return stack.peek().minVal;
    }
}
class Pair{
    int val;
    int minVal;
    public Pair(int val, int min){
        this.val = val;
        this.minVal = min;
    }
}
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */




class MinStack {
    
    Deque<Integer> dq = new ArrayDeque<>();
    Deque<Integer> min = new ArrayDeque<>();

    public MinStack() {
        
    }
    
    public void push(int val) {
        dq.addLast(val); // push the data 
         if(min.isEmpty() || min.peekFirst() >= val){
            min.addFirst(val);// we can also use addfirst 
        }
        
    }
    
    public void pop() {
        int x = dq.pollLast();
        
        if(x == min.peekFirst())
            min.pollFirst();
        
        
        System.out.println(dq.peekLast() + "value" + dq.peekFirst());
    }
    
    public int top() {
        return dq.peekLast();
    }
    
    public int getMin() {
        return min.peekFirst();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
