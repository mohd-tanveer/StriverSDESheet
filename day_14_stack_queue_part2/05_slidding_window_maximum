class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n  = nums.length;
        int[] ans = new int[n-k+1];
        for(int i = 0; i<= n-k ; i++){
            int max = Integer.MIN_VALUE;
            for(int j = i; j<i+k;j++){
                max = Math.max(max,nums[j]);
            }
            ans[i] = max;
        }
        return ans;
        
    }
}

above solution gives tle;


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n  = nums.length;
        int[] ans = new int[n-k+1];
        Deque<Integer> dq = new ArrayDeque<>();
        int a  = 0;
        for(int i = 0; i< n ; i++){
            //since we are suing sliding window we need to maintain that in dq
            if(!dq.isEmpty() && dq.peekFirst() == i-k){
                dq.removeFirst(); // equivalent ot poll() 
            }
            
            while(!dq.isEmpty() && nums[dq.peekLast()] <= nums[i]){
                dq.pollLast();
                
            }
            
            dq.addLast(i);//insert at tail what ever is the number;
            
            //start storinng once i reached to k-1 the postion basically window size 
            if(i>=k-1){
                ans[a++] = nums[dq.peekFirst()]; 
            }
        }
        return ans;
        
    }
}
