/*
	This is signature of helper function 'knows'.
	You should not implement it, or speculate about its implementation.

	boolean knows(int A, int B); 
	Function 'knows(A, B)' will returns "true" if the person having
	id 'A' know the person having id 'B' in the party, "false" otherwise.
	Use it as Runner.knows(A, B);
*/
	
public class Solution {
	public static int findCelebrity(int n) {
        // Write your code here.
        //for matrix we can look for the row for which every element is zero and corresponding column for that celb should be one for each val , zero means this is celb he doesn't knows anyone hence 0 and vice versa every one is know him so 1 for others 
        int celb = -1;
        int cnt = 0;
        for(int i = 0 ;i<n;i++){
            boolean flag = true;
            for(int j=0;j<n;j++){
               if(i != j && Runner.knows(i, j)){
                  flag = false;
                  break;
               }
            }
            if(flag){
                celb = i;
                cnt++;
            }
        }
        return cnt>1?-1:celb; //if more than celb exist
    }
}






/*
	This is signature of helper function 'knows'.
	You should not implement it, or speculate about its implementation.

	boolean knows(int A, int B); 
	Function 'knows(A, B)' will returns "true" if the person having
	id 'A' know the person having id 'B' in the party, "false" otherwise.
	Use it as Runner.knows(A, B);
*/
	
import java.util.*;
public class Solution {
	public static int findCelebrity(int n) {
        // Write your code here.
        //for matrix we can look for the row for which every element is zero and corresponding column for that celb should be one for each val , zero means this is celb he doesn't knows anyone hence 0 and vice versa every one is know him so 1 for others 
        int celb = -1;
        int cnt = 0;
        Stack<Integer> stack  = new Stack<>();
        //push all the people in the stack and pop out all the candidate until unless there is one size this is elimination method  
        for(int i = 0 ;i<n;i++){
            stack.push(i);
        }
        while(stack.size()!=1){
            int a= stack.pop();
            int b = stack.pop();
            if(Runner.knows(a, b)){
                stack.push(b); //if a knows b
            }else{
                stack.push(a);
            }
        }
        int probableCeleb = stack.pop();
        
        //is it possible that probable celeb knows someone 
            for(int j=0;j<n;j++){
               if(probableCeleb != j && Runner.knows(probableCeleb, j)){
                  return -1;
               }
            }
        //is there anyone who dosen't know celberity 
            for(int j=0;j<n;j++){
               if(probableCeleb != j && !Runner.knows(j, probableCeleb)){
                  return -1;
               }
            }
            
        return probableCeleb; //if more than celb exist
    }
}
