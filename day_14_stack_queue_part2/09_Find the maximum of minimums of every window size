import java.util.*;
public class Solution {
    public static int[] maxMinWindow(int[] nums, int n) {
        // Write your code here
        int[] res = new int[n];
        for(int k = 1 ; k<=n; k++){ //for every k we need find the minimum of window size , for k =1 there will n, minimum values, for k=2 there will n-k values so out of them wee need maximum 
            Integer[] ans = new Integer[n-k+1];
            Deque<Integer> dq = new ArrayDeque<>();
            int a  = 0;
            for(int i=0; i<n; i++){//sliding window minimum concept using queue we will find all mins ans store the them array 
               
               //to remove the data which is out of boundayr of sliding window
                if(!dq.isEmpty() && dq.peekFirst() == i-k){
                    dq.removeFirst(); // equivalent ot poll() 
                }
                while(!dq.isEmpty() && nums[dq.peekLast()] >= nums[i]){// if any eleme at front exist which is greater than next value of window should be emitted cause we need minimum 
                    dq.pollLast();
                }
                dq.addLast(i);//insert at tail what ever is the number;
                 //start storinng once i reached to k-1 the postion basically window size 
                if(i>=k-1){
                    ans[a++] = nums[dq.peekFirst()]; 
                }
            }
            res[k-1] = Collections.max(Arrays.asList(ans));
        }
        return res;
    }
}


//still this gives tle
import java.util.*;
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        // Write your code here
        //this question is  similar to histogram 
        int [] ps=new int[n];  //leftsmal 
        int [] ns=new int[n]; ///right small 
        int [] ans=new int[n];
        
        for(int i=0;i<n;i++)
            ans[i]=Integer.MIN_VALUE;
        
        Stack<Integer> s=new Stack<>();
        
        for (int i=0;i<n;i++)
        {
            while(s.isEmpty()==false && a[s.peek()]>=a[i])
                s.pop();
            ps[i]= s.isEmpty()?-1:s.peek();
            s.push(i);
        }
        while(!s.isEmpty())s.pop();
        
        for (int i=n-1;i>=0;i--)
        {
            while(s.isEmpty()==false && a[s.peek()]>=a[i])
                s.pop();
            ns[i]=s.isEmpty()?n:s.peek();
            s.push(i);
        }
        for(int i=0;i<n;i++)
        {
            ns[i]=ns[i]-ps[i]-1;
        }
        for(int i=0;i<n;i++)
        {
            ans[ns[i]-1]=Math.max(a[i],ans[ns[i]-1]);
        }
        for(int i=n-2;i>=0;i--)
            //if(ans[i]==Integer.MIN_VALUE)
            ans[i]=Math.max(ans[i],ans[i+1]);
        return ans;
    }
}
