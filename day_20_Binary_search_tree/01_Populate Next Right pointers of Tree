
class Solution {
    public Node connect(Node root) {
        
        if(root == null) return  null;

        Queue<Node> q = new LinkedList<>();
        q.add(root); //ad the root node 
        while(!q.isEmpty()){
            int size = q.size();
            int count = 1;
            for(int i =0; i< size ;i++){
                Node first = q.poll();
                System.out.println(" le " + first.val);
                Node right  = null;
                if(count != size){ //just to make sure we are inserting null in last of the level data
                    right  = q.peek();
                    System.out.println(" le" + right.val);

                    count++;
                }
                first.next = right;
                if(first.left != null) q.add(first.left);
                if(first.right != null) q.add(first.right);
            }
        }
        return root;
        
    }
}

 n* 2^log(H)


/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
        if(root == null) return  null;
        Node x  = root;
        //appraoch 2 using peepcoding 
        while(x != null && x.left != null){
            Node node  = x;
            while(true){
                node.left.next = node.right;
                if(node.next == null) break;
                node.right.next  = node.next.left;
                //move to next node in level
                node = node.next;
            }
            x  = x.left;
        }
        return root;
    }
}

 h* 2^log(H)  --> optimized 
