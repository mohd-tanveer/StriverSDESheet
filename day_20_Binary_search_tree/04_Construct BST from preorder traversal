/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
 
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        //all the elements will go in left which are less than the root node and all the elements which are greater than root will go right 
        
        // 8, 5, 1, 7, 10, 12 
        // observe first node is alwasy root and next x elements should be in left of root node 
        // and the rest left elements are in right node
        
        // we can insert the roots every time
        TreeNode  root = null;
        for(int i = 0;i<preorder.length;i++){
            root = insert(root,preorder[i]);
        }
        
        return root;
    }
    static TreeNode insert(TreeNode node, int val ){
        if(node == null) return new TreeNode(val);
        if(val < node.val)
            node.left  = insert(node.left, val);
        else
            node.right  = insert(node.right, val);
            
        return node;
        
    }
}



class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
    
        TreeNode  root = null;
        //using previous concept of if given tree is bst or not by using range bound function 
        // so every time we are using to left the upper bound will be the current root val where as we go right then upper bound will transfer and the right value can not be less than  that node val
        
        return builtTree(Integer.MAX_VALUE,preorder,new int[]{0});
       
    }

    //we could have done with indexing but it simply dosen't work so creating refrence DS for that 

    static  TreeNode builtTree(int upperBound , int[] pre , int[] index){
        if(index[0] == pre.length || pre[index[0]]>upperBound) return null;
        TreeNode node = new TreeNode(pre[index[0]++]);
        node.left  = builtTree(node.val,pre,index);
        node.right = builtTree(upperBound , pre, index );
        return node;
    }
}
