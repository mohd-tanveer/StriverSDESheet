https://www.codingninjas.com/codestudio/problems/ninja-s-training_3621003?leftPanelTab=1

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        //initailly the prev will be -1 or 3 which is out of range
        int[][] dp = new int[n][4];
        for(int[] row: dp) Arrays.fill(row,-1);
        return solve(points,n-1,3,dp);
    }
    static int solve(int[][] points,int day,int last,int[][] dp){
        //base condition is when index reaches to 0 say first row
        if(day == 0){
            int maxi = 0;
            for(int i =0;i<=2;i++){
                if(i != last){
                    maxi = Math.max(maxi,points[0][i]);
                }
            }
            return maxi;
        }
        if(dp[day][last] != -1) return dp[day][last];
        int maxi = 0;
        for(int i = 0; i < 3; i++){
            if(i != last){
                maxi = Math.max(maxi,points[day][i]+solve(points,day-1,i,dp));
            }
        }
        return dp[day][last]=maxi;
    }

}





import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        //initailly the prev will be -1 or 3 which is out of range
        //let's write in tabulation form 
        int[][] dp = new int[n][4];
        //for(int[] row: dp) Arrays.fill(row,-1);
        //base condition says when day is 0 and last task is 0 we take max of task 1 and 2, similarly for other tasks 
        //for day0
        dp[0][0] = Math.max(points[0][1],points[0][2]);
        dp[0][1] = Math.max(points[0][0],points[0][2]);
        dp[0][2] = Math.max(points[0][0],points[0][1]);
        dp[0][3] = Math.max(points[0][0],Math.max(points[0][1],points[0][2]));
        
        //for day1 onwards
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                for(int i = 0; i < 3; i++){//here I is task
                    if(i != last){
                        dp[day][last] = Math.max(dp[day][last],points[day][i]+dp[day-1][i]);
                    }
                }
            }
        }
        //return solve(points,n-1,3,dp);
        return dp[n-1][3];
    }
    

}
