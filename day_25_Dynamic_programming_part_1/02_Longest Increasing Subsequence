//recusive and memoization  for better let's go for tabular
class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        this is pattern question of lcs
        so at first we have an option to choose 10 or not to choose 10 
        and at second index we will have to compare it with previous index data whihc is part of this subsequence if it is allowed then we can take it
                prev=-1,ind=0
                    /   \
            prev=0,ind=1  prev=1,ind=1
                |                 /\
            prev =0,ind=2
                
        */
        //because -1 is not allowed in array indexing we will do the co-ordinate shift
        int[][] dp = new int[nums.length][nums.length+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
       return solveLis(nums,0,-1,dp);
        
    }
    static int solveLis(int[] nums,int ind,int prev,int[][] dp){
        //base condition 
        if(ind == nums.length) return 0;
        
        if(dp[ind][prev+1] != -1){
            return dp[ind][prev+1];
        }
        
        //not take it means length will not increase
        //not take scenario 
        int len  = solveLis(nums,ind+1,prev,dp); 
        
        
        //take it (if it is first element and we want to take it)
        if(prev == -1 || nums[ind] > nums[prev]){
           len = Math.max(len, 1+solveLis(nums,ind+1,ind,dp));
        }
        return dp[ind][prev+1]=len;
        
    }
}


//more better 
class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        this is pattern question of lcs
        so at first we have an option to choose 10 or not to choose 10 
        and at second index we will have to compare it with previous index data whihc is part of this subsequence if it is allowed then we can take it
                prev=-1,ind=0
                    /   \
            prev=0,ind=1  prev=1,ind=1
                |                 /\
            prev =0,ind=2
                
        */
        //because -1 is not allowed in array indexing we will do the co-ordinate shift
        int[][] dp = new int[nums.length][nums.length+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
       return solveLis(nums,0,-1,dp);
        
    }
    static int solveLis(int[] nums,int ind,int prev,int[][] dp){
        //base condition 
        if(ind == nums.length) return 0;
        
        if(dp[ind][prev+1] != -1){
            return dp[ind][prev+1];
        }
        
        //not take it means length will not increase
        //not take scenario 
        int len;
        if(ind< nums.length-1){//to check if ind+1 is not the last index 
            if(dp[ind+1][prev+1] != -1)
                len = dp[ind+1][prev+1];
            else{
                len  = solveLis(nums,ind+1,prev,dp); 
                dp[ind+1][prev+1] = len;
            }
        }else
            len  = solveLis(nums,ind+1,prev,dp); 
        
        
        //take it (if it is first element and we want to take it)
        if(prev == -1 || nums[ind] > nums[prev]){
            int take;
            if(ind < nums.length-1){
                if(dp[ind+1][ind+1] != -1)
                    take=  dp[ind+1][ind+1];
                else{
                    take  =  1+solveLis(nums,ind+1,ind,dp);
                    dp[ind+1][ind+1] = take;
                    }
            }else{
                take  =  1+solveLis(nums,ind+1,ind,dp);
            }
           len = Math.max(len,take);
        }
        return dp[ind][prev+1]=len;
        
    }
}


//let's go for tabular, in above code with little modifcation we can do that


//   another approach without any extra space
class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        10,9,2,5,3,7,101,18
        let's maintain an array which stores the lis for the given values at min every one will be part of itself as subsequence                          10,9,2,5,3,7,101,18 
                                                1 1 1 1 1 1 1 1 1
iteration 1, can 10 be part of 9? no            1 1 1 1 1 1 1 1 1
iter2,can 9 or 10 be part of 2? no              1 1 1 1 1 1 1 1 1
iter3,can 10,9,2 be part of 5? yes 2            1 1 1 2 1 1 1 1 1
iter4,can 10,9,2,5 be part of 3? yes only 2,    1 1 1 2 2 1 1 1 1
iter4,can 10,9,2,5,3 be part of 7?yes 2,5,3     1 1 1 2 2 3 1 1 1
itr5, can 10,9,2,5,3,7 be part of 101, yes all  1 1 1 2 2 3 4 1 1
itrs5 can 10,9,2,5,3,7,101 be part of 18,yes    1 1 1 2 2 3 4 1 4
hence we have our solution as 4

        //because -1 is not allowed in array indexing we will do the co-ordinate shift
        
        */
        int[] dp = new int[nums.length+1];
        Arrays.fill(dp,1);
        int maxi=1;
        for(int i=1;i<nums.length;i++){
            for(int prev = 0;prev<=i-1;prev++){
                if(nums[i]>nums[prev]){
                    dp[i] = Math.max(dp[i],1+dp[prev]);
                }
            }
            maxi = Math.max(dp[i],maxi);
        }
        return maxi;
        

    }
}

//to print the subsequence 
class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        10,9,2,5,3,7,101,18
        let's maintain an array which stores the lis for the given values at min every one will be part of itself as subsequence                          10,9,2,5,3,7,101,18 
                                                1 1 1 1 1 1 1 1 1
iteration 1, can 10 be part of 9? no            1 1 1 1 1 1 1 1 1
iter2,can 9 or 10 be part of 2? no              1 1 1 1 1 1 1 1 1
iter3,can 10,9,2 be part of 5? yes 2            1 1 1 2 1 1 1 1 1
iter4,can 10,9,2,5 be part of 3? yes only 2,    1 1 1 2 2 1 1 1 1
iter4,can 10,9,2,5,3 be part of 7?yes 2,5,3     1 1 1 2 2 3 1 1 1
itr5, can 10,9,2,5,3,7 be part of 101, yes all  1 1 1 2 2 3 4 1 1
itrs5 can 10,9,2,5,3,7,101 be part of 18,yes    1 1 1 2 2 3 4 1 4
hence we have our solution as 4

        //because -1 is not allowed in array indexing we will do the co-ordinate shift
        
        this solution will help us to print the subsequence using back track
        
        */
        int[] dp = new int[nums.length];
        int[] print = new int[nums.length];//this will store the previous index of this subsequence 
        //for example for 101 this index data will store the inde of 7, and 7th index will store the index of 3, and 3's index will store the index of  2, this way can backtrack 
        Arrays.fill(dp,1);
        int maxi=1;
        int lastInd = 0;
        for(int i=1;i<nums.length;i++){
            print[i] = i;//it should store itself
            for(int prev = 0;prev<=i-1;prev++){
                if(nums[i]>nums[prev] && 1+dp[prev] >dp[i] ){
                    //dp[i] = Math.max(dp[i],1+dp[prev]);
                    dp[i] = 1+dp[prev];
                    print[i] = prev;
                }
            }
            //we need the last index as well
            if(dp[i]>maxi){
                maxi = dp[i];
                lastInd = i;
            }
        }
        //System.out.println(lastInd + " .  " +print[lastInd]);
        List<Integer> list = new ArrayList<>();
        list.add(nums[lastInd]);
        while(print[lastInd] != lastInd){//because at line 28 we have stored it self 
            list.add(0,nums[print[lastInd]]);
            lastInd = print[lastInd];
        }
        list.forEach(System.out::println);
        return maxi;
        

    }
}


//binary search 

class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        let's solve it using binary Search Tree
        this solution will help us to print the subsequence using back track
        
        */
        List<Integer> list  = new ArrayList<>();
        list.add(nums[0]);
        for(int i=1;i<nums.length;i++){
            if(nums[i] > list.get(list.size()-1))
                list.add(nums[i]);
            else{
                //we need to find the lower bound 
                int lowerBound  = findLowerBound(list,nums[i],0,list.size());
                list.remove(lowerBound);
                list.add(lowerBound,nums[i]);
            }
        }
        return list.size();
        
        
    }
    static int findLowerBound(List<Integer> list, int key, int low, int high){
        //base case
        if(low>high) return low;
        int mid = low +(high-low)/2;
        if(key <= list.get(mid)){
            //we need to search lower half
           return findLowerBound(list,key,low,mid-1);
        }else{
            return findLowerBound(list,key,mid+1,high);
        }
    }
}
