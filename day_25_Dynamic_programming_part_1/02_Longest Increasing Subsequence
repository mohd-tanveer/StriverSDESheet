//recusive and memoization  for better let's go for tabular
class Solution {
    public int lengthOfLIS(int[] nums) {
        /*
        this is pattern question of lcs
        so at first we have an option to choose 10 or not to choose 10 
        and at second index we will have to compare it with previous index data whihc is part of this subsequence if it is allowed then we can take it
                prev=-1,ind=0
                    /   \
            prev=0,ind=1  prev=1,ind=1
                |                 /\
            prev =0,ind=2
                
        */
        //because -1 is not allowed in array indexing we will do the co-ordinate shift
        int[][] dp = new int[nums.length][nums.length+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
       return solveLis(nums,0,-1,dp);
        
    }
    static int solveLis(int[] nums,int ind,int prev,int[][] dp){
        //base condition 
        if(ind == nums.length) return 0;
        
        if(dp[ind][prev+1] != -1){
            return dp[ind][prev+1];
        }
        
        //not take it means length will not increase
        //not take scenario 
        int len  = solveLis(nums,ind+1,prev,dp); 
        
        
        //take it (if it is first element and we want to take it)
        if(prev == -1 || nums[ind] > nums[prev]){
           len = Math.max(len, 1+solveLis(nums,ind+1,ind,dp));
        }
        return dp[ind][prev+1]=len;
        
    }
}
