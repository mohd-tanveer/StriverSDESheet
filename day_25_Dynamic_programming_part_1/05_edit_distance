class Solution {
    public int minDistance(String word1, String word2) {
        //we can use lcs
        // horse 
        // ros 
        // i, j 
        // if it matches we don't do any operartion  else
        // insert (insert we don't be moving), horse --> horses , ros , s & s will match and j-- f(i,j-1)
        //deleted (deleted from first string) 1+ f(i-1,j)
        //replace replace means move one step 1 + f(i-1,j-1)
        //minimum number of operation to convert it to string with empty string, operation is length 
        int[][] dp = new int[word1.length()][word2.length()];
        int res  = solve(word1,word2,word1.length()-1,word2.length()-1,dp);
        return res;
    }
    static int solve(String word1, String word2, int i, int j,int[][] dp){
        //base condition 
        if(i<0) return j+1;//operation would reequire ot make the string
        if(j<0) return i+1; // operations required to make the string
        //scenario when it matches 
        if(dp[i][j] !=0) return dp[i][j];
        if(word1.charAt(i) == word2.charAt(j)){
            return solve(word1,word2,i-1,j-1,dp);
        }
        //if it doesn't match it means we can perform three operations and need minimum out of them
        int insert =1+ solve(word1,word2,i,j-1,dp);
        int delete = 1+solve(word1,word2,i-1,j,dp);
        int replace = 1+solve(word1,word2,i-1,j-1,dp);  
        
        return dp[i][j]=Math.min(insert,Math.min(delete,replace));
        
        
       }
}
                           

//tabulation form 

class Solution {
    public int minDistance(String word1, String word2) {
        
        int[][] dp = new int[word1.length()+1][word2.length()+1];
        //base case
        //for i==0 the value is j and for j==0 the value is i
        for(int i =0;i<=word1.length();i++){
            dp[i][0] = i;
        }
        for(int j =0;j <= word2.length();j++){
            dp[0][j] = j;
        }
        //copy the recurrence 
        for(int i = 1; i <= word1.length();i++){
            for(int j =1; j <=word2.length();j++){
                if(word1.charAt(i-1) == word2.charAt(j-1))
                    dp[i][j] = dp[i-1][j-1];
                else{
                    
                    //if it doesn't match it means we can perform three operations and need minimum out of them
                    int insert =1+ dp[i][j-1];
                    int delete = 1+ dp[i-1][j];
                    int replace = 1+dp[i-1][j-1];  

                    dp[i][j]=Math.min(insert,Math.min(delete,replace));
                    
                    //dp[i][j] = 1+ Math.min(dp[i][j-1],Math.min(dp[i-1][j],dp[i-1][j-1]))
                }
            }
        }
        return dp[word1.length()][word2.length()];
        
    }
}
