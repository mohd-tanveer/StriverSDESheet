/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.*;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		// Write your code here.
        // Write your code here.
        //go to left of the tree /left boundary  and print all the left elements except leaf node
        // do in order traversal and print the leaf nodes
        // go to right side/right boundary and print the right side boundary in reverse order except leaf node 
        ArrayList<Integer> ans = new ArrayList<>();
        if(root==null) return ans;
        if(!isLeaf(root)){
             ans.add(root.data); 
        }

        TreeNode node = root;
        leftBoundary(root.left,ans);
        addLeaves(root,ans);
        rightBoundary(root.right,ans);
        
        return ans;
	}
    
    static void leftBoundary(TreeNode node, ArrayList<Integer> ans){
       
        while(node != null){
             if(!isLeaf(node)){
                ans.add(node.data);
             }
            if(node.left != null) node = node.left;
            else node = node.right;//move to right 
        }
        
        
    }
    static void addLeaves(TreeNode node, ArrayList<Integer> ans){
        if(isLeaf(node)){
            ans.add(node.data);
            return;
        }
        if(node.left != null) addLeaves(node.left, ans);
        if(node.right != null) addLeaves(node.right, ans);
        
    }
    static void rightBoundary(TreeNode node, ArrayList<Integer> ans){
        TreeNode curr = node;
        Stack<Integer> stack = new Stack<>();
        while(curr != null){
             if(!isLeaf(curr)){
                stack.push(curr.data);
             }
            if(curr.right != null) curr = curr.right;
            else curr = curr.left;//move to right 
        }
        while(!stack.isEmpty()){
            ans.add(stack.pop());
        }   
    }
    static Boolean isLeaf(TreeNode root){
        return (root.left == null) && (root.right == null);
    }
}
    
