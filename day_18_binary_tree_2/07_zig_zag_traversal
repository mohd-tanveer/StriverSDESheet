/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> dq = new LinkedList<>();
        List<List<Integer>> list  = new ArrayList<>();
        if(root == null) return list;
        
        int zigzag  = -1;//need to travel from left to right
        dq.add(root);
        while(!dq.isEmpty()){
            int size  = dq.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0 ; i<size ;i ++){
                TreeNode node = dq.poll();
                if(node.left != null) dq.add(node.left);
                if( node.right != null) dq.add(node.right);
                
                if(zigzag == -1) temp.add(node.val); //normal addition in the list 
                else temp.add(0,node.val); //adding revereliy 
                
            }
           
            list.add(temp);
            zigzag  = zigzag*(-1);
        }
        
        return list;
        
    }
}
