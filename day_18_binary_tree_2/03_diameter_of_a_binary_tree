/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//this is brute force approach , calculate the hight at each node and then store the maximum of the value at each node 
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        
        if(root== null) return 0;
        int d[] = new int[1]; //in java for integer ref
        dia(root,d);//pasing the diameter 
        
        
        return d[0];
    }
    static void dia(TreeNode node,int[] d){
        if(node == null) return;
        int lh = subtreelen(node.left);
        int rh = subtreelen(node.right);
        
        d[0] = Math.max(d[0],lh+rh);
        //no go and calculate rest of nodes heigh 
        dia(node.left,d);
        dia(node.right,d);
    }
    
    static int subtreelen(TreeNode node){
        if(node==null) return 0;
        
        return 1+Math.max(subtreelen(node.left),subtreelen(node.right));
    }
}

o(n^2)

//   while calculating hight of binary tree we can keep updating the diameter

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//this is brute force approach , calculate the hight at each node and then store the maximum of the value at each node 
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        
        if(root== null) return 0;
        int d[] = new int[1]; //in java for integer ref
        subtreelen(root,d);//pasing the diameter 
        
        
        return d[0];
    }
    
    static int subtreelen(TreeNode node, int[] d){
        if(node==null) return 0;
        int lh = subtreelen(node.left,d);
        int rh = subtreelen(node.right,d);
        d[0] = Math.max(d[0],lh+rh);  //at each node calculate the Distance 
        return 1+Math.max(lh,rh);
    }
}
