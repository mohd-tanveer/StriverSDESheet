/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> q  = new LinkedList<>();
        q.add(root);
        int maxlevl = 0;
        while(!q.isEmpty()){
            maxlevl++;
            int size  = q.size();
            for(int i = 0; i<size ;i++){
                TreeNode node  = q.poll();
                
                if(node.left != null)
                    q.add(node.left);
                
                if(node.right != null)
                    q.add(node.right);
                
            }
        }
        
        return maxlevl;
    }
}
    


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 //recusive soution 
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        
        //first way  is a iterative way look for above
        //second way is using postordertraversal , find the lenght of left sub tree and the length of right sub tree
        // and return the maximum 
        //since root is present so length will be 1 + max(left, right)
        
        return  1 +  Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}
    
