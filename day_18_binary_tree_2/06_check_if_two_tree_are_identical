/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
if(p == null && q == null ){
            return true;
        }
        if((p == null && q !=null) || (p!=null && q==null) ) return false;
        
        */

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null ){
            return true;
        }
        if((p == null && q !=null) || (p!=null && q==null) ) return false;
        
        if(p.val == q.val){
            return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        }else{
            return false;
        }
        
        
    }
}



//more optimized 

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null )
            return true;
                
        if(p!=null && q!=null)
            return (p.val == q.val) && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        
        return false ;
    }
}


//even more optimized

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null || q == null )
            return (p==q);
        
        return (p.val == q.val) && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        
    }
}



//coding nijas

/*******************************************************

    Following is the BinaryTreeNode class structure:

    class BinaryTreeNode<T> {
        T data;
        BinaryTreeNode<T> left;
        BinaryTreeNode<T> right;
        
        public BinaryTreeNode(T data) {
            this.data = data;
        }
    }

*******************************************************/

public class Solution {
    
    public static boolean identicalTrees(BinaryTreeNode<Integer> root1, BinaryTreeNode<Integer> root2) {
        // Write you code here. 
        if(root1 == null || root2 ==null) return (root1==root2);
        return (root1.data.equals(root2.data)) && identicalTrees(root1.left, root2.left) && identicalTrees(root1.right,root2.right);
    }

}
